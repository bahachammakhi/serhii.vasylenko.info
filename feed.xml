<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://serhii.vasylenko.info/feed.xml" rel="self" type="application/atom+xml" /><link href="https://serhii.vasylenko.info/" rel="alternate" type="text/html" /><updated>2021-05-28T20:48:55+03:00</updated><id>https://serhii.vasylenko.info/feed.xml</id><title type="html">Serhii Vasylenko</title><subtitle>Here I publish my notes about different things, mostly technical: AWS, Terraform, around DevOps stuff and more.</subtitle><author><name>Serhii Vasylenko</name></author><entry><title type="html">Run Ansible playbook on mac1.metal instances fleet with AWS Systems Manager</title><link href="https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.html" rel="alternate" type="text/html" title="Run Ansible playbook on mac1.metal instances fleet with AWS Systems Manager" /><published>2021-05-27T00:00:00+03:00</published><updated>2021-05-27T00:00:00+03:00</updated><id>https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/05/27/run-ansible-playbook-mac1-metal-aws-systems-manager.html">&lt;p&gt;In days of containers and serverless applications, Ansible looks not such a trendy thing.&lt;/p&gt;

&lt;p&gt;But still, there are cases when it helps, and there are cases when it combines very well with brand new product offerings, such as EC2 Mac instances.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html&quot;&gt;more I use mac1.metal&lt;/a&gt; in AWS, the more I see that Ansible becomes a bedrock of software customization in my case.&lt;/p&gt;

&lt;p&gt;And when you have a large instances fleet, the AWS Systems Manager becomes your best friend (the sooner you get along together, the better).&lt;/p&gt;

&lt;p&gt;So is it possible to use Ansible playbooks for mac1.metal on a big scale, with the help of AWS Systems Manager?&lt;/p&gt;

&lt;h2 id=&quot;not-available-out-of-the-box&quot;&gt;(Not) Available out of the box&lt;/h2&gt;
&lt;p&gt;AWS Systems Manager (SSM hereafter) has a pre-defined, shared Document that allows running Ansible playbooks.&lt;/p&gt;

&lt;p&gt;It’s called “AWS-RunAnsiblePlaybook,” and you can find it in AWS SSM → Documents → Owned by Amazon.&lt;/p&gt;

&lt;p&gt;However, this Document is not quite “friendly” to macOS. When the SSM agent calls Ansible on the Mac EC2 instance, it does not recognize the Ansible installed with Homebrew (de-facto most used macOS package manager).&lt;/p&gt;

&lt;p&gt;So if you try to run a command on the mac1.metal instance using this Document, you will get the following error:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Ansible is not installed. Please &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;Ansible and rerun the command.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The root cause is trivial: the path to Ansible binary is not present on the list of paths available to the SSM agent by default.&lt;/p&gt;

&lt;p&gt;There are several ways to solve that, but I believe that the most convenient one would be to create your custom Document — a slightly adjusted version of the default one provided by AWS.&lt;/p&gt;

&lt;h2 id=&quot;creating-own-ssm-document-for-ansible-installed-with-homebrew&quot;&gt;Creating own SSM Document for Ansible installed with Homebrew&lt;/h2&gt;

&lt;p&gt;All you need to do is clone the Document provided by AWS and change its code a little — replace the callouts of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt; with the full path to the binary.&lt;/p&gt;

&lt;p&gt;Navigate to AWS SSM → Documents → Owned by Amazon and type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AWS-RunAnsiblePlaybook&lt;/code&gt; in the search field.&lt;/p&gt;

&lt;p&gt;Select the Document by pressing the circle on its top-right corner and then click Actions → Clone document.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-27-run-ansible-playbook-mac1-metal-aws-systems-manager/aws_ssm_document_clone.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Give the new SSM Document a name, e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos-arbitrary-ansible-playbook&lt;/code&gt;, and change the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ansible&lt;/code&gt; callouts (at the end of the code) with the full path to the ansible symlink made by Homebrew which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin/ansible&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here is the complete source code of the Document with adjusted Ansible path:&lt;/p&gt;

&lt;details&gt;
&lt;summary&gt;&lt;b&gt;Click to see the Document source code&lt;/b&gt;&lt;/summary&gt;
&lt;pre&gt;

{
  &quot;schemaVersion&quot;: &quot;2.0&quot;,
  &quot;description&quot;: &quot;Use this document to run arbitrary Ansible playbooks on macOS EC2 instances. Specify either YAML text or URL. If you specify both, the URL parameter will be used. Use the extravar parameter to send runtime variables to the Ansible execution. Use the check parameter to perform a dry run of the Ansible execution. The output of the dry run shows the changes that will be made when the playbook is executed.&quot;,
  &quot;parameters&quot;: {
    &quot;playbook&quot;: {
      &quot;type&quot;: &quot;String&quot;,
      &quot;description&quot;: &quot;(Optional) If you don't specify a URL, then you must specify playbook YAML in this field.&quot;,
      &quot;default&quot;: &quot;&quot;,
      &quot;displayType&quot;: &quot;textarea&quot;
    },
    &quot;playbookurl&quot;: {
      &quot;type&quot;: &quot;String&quot;,
      &quot;description&quot;: &quot;(Optional) If you don't specify playbook YAML, then you must specify a URL where the playbook is stored. You can specify the URL in the following formats: http://example.com/playbook.yml  or s3://examplebucket/plabook.url. For security reasons, you can't specify a URL with quotes.&quot;,
      &quot;default&quot;: &quot;&quot;,
      &quot;allowedPattern&quot;: &quot;^\\s*$|^(http|https|s3)://[^']*$&quot;
    },
    &quot;extravars&quot;: {
      &quot;type&quot;: &quot;String&quot;,
      &quot;description&quot;: &quot;(Optional) Additional variables to pass to Ansible at runtime. Enter a space separated list of key/value pairs. For example: color=red or fruits=[apples,pears]&quot;,
      &quot;default&quot;: &quot;foo=bar&quot;,
      &quot;displayType&quot;: &quot;textarea&quot;,
      &quot;allowedPattern&quot;: &quot;^((^|\\s)\\w+=(\\S+|'.*'))*$&quot;
    },
    &quot;check&quot;: {
      &quot;type&quot;: &quot;String&quot;,
      &quot;description&quot;: &quot; (Optional) Use the check parameter to perform a dry run of the Ansible execution.&quot;,
      &quot;allowedValues&quot;: [
        &quot;True&quot;,
        &quot;False&quot;
      ],
      &quot;default&quot;: &quot;False&quot;
    },
    &quot;timeoutSeconds&quot;: {
      &quot;type&quot;: &quot;String&quot;,
      &quot;description&quot;: &quot;(Optional) The time in seconds for a command to be completed before it is considered to have failed.&quot;,
      &quot;default&quot;: &quot;3600&quot;
    }
  },
  &quot;mainSteps&quot;: [
    {
      &quot;action&quot;: &quot;aws:runShellScript&quot;,
      &quot;name&quot;: &quot;runShellScript&quot;,
      &quot;inputs&quot;: {
        &quot;timeoutSeconds&quot;: &quot;&quot;,
        &quot;runCommand&quot;: [
          &quot;#!/bin/bash&quot;,
          &quot;/usr/local/bin/ansible --version&quot;,
          &quot;if [ $? -ne 0 ]; then&quot;,
          &quot; echo \&quot;Ansible is not installed. Please install Ansible and rerun the command\&quot; &amp;gt;&amp;amp;2&quot;,
          &quot; exit 1&quot;,
          &quot;fi&quot;,
          &quot;execdir=$(dirname $0)&quot;,
          &quot;cd $execdir&quot;,
          &quot;if [ -z '' ] ; then&quot;,
          &quot; if [[ \&quot;\&quot; == http* ]]; then&quot;,
          &quot;   wget '' -O playbook.yml&quot;,
          &quot;   if [ $? -ne 0 ]; then&quot;,
          &quot;       echo \&quot;There was a problem downloading the playbook. Make sure the URL is correct and that the playbook exists.\&quot; &amp;gt;&amp;amp;2&quot;,
          &quot;       exit 1&quot;,
          &quot;   fi&quot;,
          &quot; elif [[ \&quot;\&quot; == s3* ]] ; then&quot;,
          &quot;   aws --version&quot;,
          &quot;   if [ $? -ne 0 ]; then&quot;,
          &quot;       echo \&quot;The AWS CLI is not installed. The CLI is required to process Amazon S3 URLs. Install the AWS CLI and run the command again.\&quot; &amp;gt;&amp;amp;2&quot;,
          &quot;       exit 1&quot;,
          &quot;   fi&quot;,
          &quot;   aws s3 cp '' playbook.yml&quot;,
          &quot;   if [ $? -ne 0 ]; then&quot;,
          &quot;       echo \&quot;Error while downloading the document from S3\&quot; &amp;gt;&amp;amp;2&quot;,
          &quot;       exit 1&quot;,
          &quot;   fi&quot;,
          &quot; else&quot;,
          &quot;   echo \&quot;The playbook URL is not valid. Verify the URL and try again.\&quot;&quot;,
          &quot; fi&quot;,
          &quot;else&quot;,
          &quot; echo '' &amp;gt; playbook.yml&quot;,
          &quot;fi&quot;,
          &quot;if  [[ \&quot;\&quot; == True ]] ; then&quot;,
          &quot;   /usr/local/bin/ansible-playbook -i \&quot;localhost,\&quot; --check -c local -e \&quot;\&quot; playbook.yml&quot;,
          &quot;else&quot;,
          &quot;   /usr/local/bin/ansible-playbook -i \&quot;localhost,\&quot; -c local -e \&quot;\&quot; playbook.yml&quot;,
          &quot;fi&quot;
        ]
      }
    }
  ]
}

&lt;/pre&gt;
&lt;/details&gt;

&lt;h2 id=&quot;applying-ansible-playbook-to-the-fleet-of-mac1metal&quot;&gt;Applying Ansible playbook to the fleet of mac1.metal&lt;/h2&gt;

&lt;p&gt;Let’s give our new SSM Document a try! (I suppose you have at least one mac1 instance running, right?)&lt;/p&gt;

&lt;p&gt;In AWS SSM, go to the Run Command feature, then click on the Run Command button.&lt;/p&gt;

&lt;p&gt;On the new panel, type the name of your Document (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;macos-arbitrary-ansible-playbook&lt;/code&gt; in this example) in the search field and press enter.&lt;/p&gt;

&lt;p&gt;Select the Document, and you’ll see its parameters and settings.&lt;/p&gt;

&lt;p&gt;The rest is self-explanatory. Enter either a playbook code or a link to the source file, add extra variables if needed, and select the target host or a filtered bunch (I like that feature with tags filtering!). Finally, click on the “Run” orange button to apply your playbook.&lt;/p&gt;

&lt;p&gt;That’s it! Now you can make all your ansible-playbook dreams come true! 😁&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Technical Blogs&quot;]" /><category term="aws" /><category term="ansible" /><summary type="html">In days of containers and serverless applications, Ansible looks not such a trendy thing.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-05-27-run-ansible-playbook-mac1-metal-aws-systems-manager/cover_image.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-05-27-run-ansible-playbook-mac1-metal-aws-systems-manager/cover_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Configure HTTP Security headers with CloudFront Functions</title><link href="https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html" rel="alternate" type="text/html" title="Configure HTTP Security headers with CloudFront Functions" /><published>2021-05-21T00:00:00+03:00</published><updated>2021-05-21T00:00:00+03:00</updated><id>https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/05/21/configure-http-security-headers-with-cloudfront-functions.html">&lt;p&gt;A couple of weeks ago, AWS released CloudFront Functions — a “true edge” compute capability for the CloudFront.&lt;/p&gt;

&lt;p&gt;It is “true edge” because Functions work on 200+ edge locations (&lt;a href=&quot;https://aws.amazon.com/cloudfront/features/?whats-new-cloudfront.sort-by=item.additionalFields.postDateTime&amp;amp;whats-new-cloudfront.sort-order=desc#Edge_Computing&quot;&gt;link to doc&lt;/a&gt;) while its predecessor, the Lambda@Edge, runs on a small number of regional edge caches.&lt;/p&gt;

&lt;p&gt;One of the use cases for Lambda@Edge was adding security HTTP headers (it’s even listed on the &lt;a href=&quot;https://aws.amazon.com/lambda/edge/&quot;&gt;product page&lt;/a&gt;), and now there is one more way to make it using CloudFront Functions.&lt;/p&gt;

&lt;h2 id=&quot;what-are-security-headers-and-why-it-matters&quot;&gt;What are security headers, and why it matters&lt;/h2&gt;
&lt;p&gt;Security Headers are one of the web security pillars.&lt;/p&gt;

&lt;p&gt;They specify security-related information of communication between a web application (i.e., website) and a client (i.e., browser) and protect the web app from different types of attacks. Also, HIPAA and PCI, and other security standard certifications generally include these headers in their rankings.&lt;/p&gt;

&lt;p&gt;We will use CloudFront Functions to set the following headers:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#content-security-policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#http-strict-transport-security&quot;&gt;Strict Transport Security&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#x-content-type-options&quot;&gt;X-Content-Type-Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#x-xss-protection&quot;&gt;X-XSS-Protection&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#x-frame-options&quot;&gt;X-Frame-Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security#referrer-policy&quot;&gt;Referrer Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find a short and detailed explanation for each security header on &lt;a href=&quot;https://infosec.mozilla.org/guidelines/web_security&quot;&gt;Web Security cheatsheet made by Mozilla&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;cloudfront-functions-overview&quot;&gt;CloudFront Functions overview&lt;/h2&gt;
&lt;p&gt;In a nutshell, CloudFront Functions allow performing simple actions against HTTP(s) request (from the client) and response (from the CloudFront cache at the edge). Functions take less than one millisecond to execute, support JavaScript (ECMAScript 5.1 compliant), and cost $0.10 per 1 million invocations.&lt;/p&gt;

&lt;p&gt;Every CloudFront distribution has one (default) or more Cache behaviors, and Functions can be associated with these behaviors to execute upon a specific event.&lt;/p&gt;

&lt;p&gt;That is how the request flow looks like in general, and here is where CloudFront Functions execution happens:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/request_flow.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CloudFront Functions support Viewer Request (after CloudFront receives a request from a client) and Viewer Response (before CloudFront forwards the response to the client) events.&lt;/p&gt;

&lt;p&gt;You can read more about the events types and their properties here — &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-cloudfront-trigger-events.html&quot;&gt;CloudFront Events That Can Trigger a Lambda Function - Amazon CloudFront&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Also, the CloudFront Functions allow you to manage and operate the code and lifecycle of the functions directly from the CloudFront web interface.&lt;/p&gt;

&lt;h2 id=&quot;solution-overview&quot;&gt;Solution overview&lt;/h2&gt;

&lt;p&gt;CloudFront distribution should exist before Function creation so you could associate the Function with the distribution.&lt;/p&gt;

&lt;p&gt;Creation and configuration of the CloudFront Function consist of the following steps:&lt;/p&gt;

&lt;h3 id=&quot;create-function&quot;&gt;Create Function&lt;/h3&gt;
&lt;p&gt;In the AWS Console, open CloudFront service and lick on the Functions on the left navigation bar, then click Create function button.
   &lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/create_function.png&quot; alt=&quot;&quot; /&gt;
Enter the name of your Function (e.g., “security-headers”) and click Continue.&lt;/p&gt;

&lt;h3 id=&quot;build-function&quot;&gt;Build Function&lt;/h3&gt;
&lt;p&gt;On the function settings page, you will see four tabs with the four lifecycle steps: Build, Test, Publish, Associate.&lt;/p&gt;

&lt;p&gt;Paste the function code into the editor and click “Save.”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/function_editor.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the source code of the function:&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;strict-transport-security&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;max-age=63072000; includeSubdomains; preload&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;content-security-policy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; frame-ancestors 'none'&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;x-content-type-options&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;nosniff&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; 
&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;x-xss-protection&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;1; mode=block&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;referrer-policy&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;same-origin&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;x-frame-options&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;DENY&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h4 id=&quot;test-function&quot;&gt;Test Function&lt;/h4&gt;
&lt;p&gt;Open the “Test” tab — let’s try our function first before it becomes live!&lt;/p&gt;

&lt;p&gt;Select Viewer Response event type and Development Stage, then select “Viewer response with headers” as a Sample test event (you will get a simple set of headers automatically).&lt;/p&gt;

&lt;p&gt;Now click the blue “Test” button and observe the output results:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Compute utilization represents the relative amount of time (on a scale between 0 and 100) your function took to run&lt;/li&gt;
  &lt;li&gt;Check the Response headers tab and take a look at how the function added custom headers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/function_test.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;publish-function&quot;&gt;Publish Function&lt;/h3&gt;
&lt;p&gt;Let’s publish our function. To do that, open the Publish tab and click on the blue button “Publish and update.”
&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/function_publish.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;associate-your-function-with-cloudfront-distribution&quot;&gt;Associate your Function with CloudFront distribution&lt;/h3&gt;
&lt;p&gt;Now, you can associate the function with the CloudFront distribution.&lt;/p&gt;

&lt;p&gt;To do so, open the Associate tab, select the distribution and event type (Viewer Response), and select the Cache behavior of your distribution which you want to use for the association.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/function_associate.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you associate the function with the CloudFront distribution, you can test it in live mode.&lt;/p&gt;

&lt;p&gt;I will use curl here to demonstrate it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; https://d30i87a4ss9ifz.cloudfront.net
HTTP/2 200
content-type: text/html
content-length: 140
&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;: Sat, 22 May 2021 00:22:18 GMT
last-modified: Tue, 27 Apr 2021 23:07:14 GMT
etag: &lt;span class=&quot;s2&quot;&gt;&quot;a855a3189f8223db53df8a0ca362dd62&quot;&lt;/span&gt;
accept-ranges: bytes
server: AmazonS3
via: 1.1 50f21cb925e6471490e080147e252d7d.cloudfront.net &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;CloudFront&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
content-security-policy: default-src &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; img-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; script-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; style-src &lt;span class=&quot;s1&quot;&gt;'self'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; object-src &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; frame-ancestors &lt;span class=&quot;s1&quot;&gt;'none'&lt;/span&gt;
strict-transport-security: max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;63072000&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; includeSubdomains&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; preload
x-xss-protection: 1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;block
x-frame-options: DENY
referrer-policy: same-origin
x-content-type-options: nosniff
x-cache: Miss from cloudfront
x-amz-cf-pop: WAW50-C1
x-amz-cf-id: ud3qH8rLs7QmbhUZ-DeupGwFhWLpKDSD59vr7uWC65Hui5m2U8o2mw&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also test your results here — &lt;a href=&quot;https://observatory.mozilla.org/&quot;&gt;Mozilla Observatory&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/scan_result-1.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/scan_result-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;read-more&quot;&gt;Read more&lt;/h2&gt;
&lt;p&gt;That was a simplified overview of the CloudFront Functions capabilities.&lt;/p&gt;

&lt;p&gt;But if you want to get deeper, here is a couple of useful links to start:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Another overview from AWS — &lt;a href=&quot;https://aws.amazon.com/blogs/aws/introducing-cloudfront-functions-run-your-code-at-the-edge-with-low-latency-at-any-scale&quot;&gt;CloudFront Functions Launch Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;More about creating, testing, updating and publishing of CloudFront Functions — &lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/managing-functions.html&quot;&gt;Managing functions in CloudFront Functions - Amazon CloudFront&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-to-choose&quot;&gt;So what to choose?&lt;/h2&gt;
&lt;p&gt;CloudFront Functions are simpler than Lambda@Edge and run faster with minimal latency and minimal time penalty for your web clients.&lt;/p&gt;

&lt;p&gt;Lambda@Edge takes more time to invoke, but it can run upon Origin Response event so that CloudFront can cache the processed response (including headers) and return it faster afterward.&lt;/p&gt;

&lt;p&gt;But again, the CloudFront Functions invocations are much cheaper (6x times) than Lambda@Edge, and you do not pay for the function execution duration.&lt;/p&gt;

&lt;p&gt;The final decision would also depend on the dynamic/static nature of the content you have at your origin.&lt;/p&gt;

&lt;p&gt;To make a wise and deliberate decision, try to analyze your use case using these two documentation articles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/edge-functions.html&quot;&gt;Choosing between CloudFront Functions and Lambda@Edge&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-how-to-choose-event.html&quot;&gt;How to Decide Which CloudFront Event to Use to Trigger a Lambda Function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Technical Blogs&quot;]" /><category term="aws" /><category term="cloudfront" /><summary type="html">A couple of weeks ago, AWS released CloudFront Functions — a “true edge” compute capability for the CloudFront.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/cover_image.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-05-21-configure-http-security-headers-with-cloudfront-functions/cover_image.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Using TinyPNG Image Compression From MacOS Finder Contextual Menu</title><link href="https://serhii.vasylenko.info/2021/02/14/image-compression-with-tinypng-from-macos-contextual-menu.html" rel="alternate" type="text/html" title="Using TinyPNG Image Compression From MacOS Finder Contextual Menu" /><published>2021-02-14T00:00:00+02:00</published><updated>2021-02-14T00:00:00+02:00</updated><id>https://serhii.vasylenko.info/2021/02/14/image-compression-with-tinypng-from-macos-contextual-menu</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/02/14/image-compression-with-tinypng-from-macos-contextual-menu.html">&lt;p&gt;I just wanted to compress one image, but went to far…&lt;/p&gt;

&lt;p&gt;or “How to add TinyPNG image compression to your macOS Finder contextual menu.”&lt;/p&gt;

&lt;h1 id=&quot;what-is-it-and-how-it-works&quot;&gt;What is it and how it works&lt;/h1&gt;
&lt;p&gt;You select needed files or folders, then right-click on them, click on the Services menu item and choose TinyPNG.&lt;/p&gt;

&lt;p&gt;After a moment, the new optimized versions of images will appear near to original files.&lt;/p&gt;

&lt;p&gt;If you selected a folder along with the files, the script would process all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;png&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jpeg&lt;/code&gt; files in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-02-14-image-compression-with-tinypng-from-macos-contextual-menu/context_menu_full_compressed.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h1&gt;
&lt;p&gt;You need to register at TinyPNG and get your API key here — &lt;a href=&quot;https://tinypng.com/developers&quot;&gt;Developer API&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;They sometimes block some countries (for example, Ukraine) from registration; in that case, try to use a web-proxy or VPN.&lt;/p&gt;

&lt;h1 id=&quot;how-to-create-quick-action-workflow&quot;&gt;How to create Quick Action Workflow&lt;/h1&gt;
&lt;p&gt;Open Automator application. If you never used this app before, please read about it on the official &lt;a href=&quot;https://support.apple.com/guide/automator/create-a-workflow-aut7cac58839/2.10/mac/11.0&quot;&gt;user guide website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the New Action screen, chose &lt;strong&gt;Quick Action&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-02-14-image-compression-with-tinypng-from-macos-contextual-menu/quick_action_compressed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you click the “Choose” button, you’ll see the workflow configuration window.&lt;/p&gt;

&lt;h1 id=&quot;workflow-configuration&quot;&gt;Workflow configuration&lt;/h1&gt;
&lt;p&gt;Find the &lt;strong&gt;Run Shell Script&lt;/strong&gt; action on the Utilities list in Library on the left, and drag it onto the right side of the panel.&lt;/p&gt;

&lt;p&gt;Set the following workflow configuration options as described below:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Workflow receives current&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;files and folders&lt;/code&gt; &lt;strong&gt;in&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finder&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Shell&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin/zsh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pass input&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;as arguments&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;strong&gt;Option&lt;/strong&gt; button at the bottom of the Action window and &lt;strong&gt;Uncheck&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Show this action when the workflow runs.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-02-14-image-compression-with-tinypng-from-macos-contextual-menu/run_shell_script_compressed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Put the following script into the &lt;strong&gt;Run Shell Script&lt;/strong&gt; window, replacing the &lt;em&gt;YOUR_API_KEY_HERE&lt;/em&gt; string with your API key obtained from TinyPNG.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/13cb423aa83265e79ac5ad900195603f.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;utilities-used-in-the-script--explained&quot;&gt;Utilities used in the script — explained&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt; — used to make web requests (like your browser does)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt; — used to parse the response for the needed header (i.e., field) with the file download link&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cut&lt;/code&gt; — used to extract the URL from the parsed result&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt; — used to remove the trailing “carriage return” symbol at the end of extracted string&lt;/p&gt;

&lt;p&gt;The response body also contains a JSON object that includes the download URL; you can parse it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt;, for example. But I intentionally refused to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jq&lt;/code&gt; tool because it is not pre-installed in MacOS.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;It is simple, and it does its job fine. And you don’t need to install anything to make it work.&lt;/p&gt;

&lt;p&gt;To make this a bit fancier, you might also like to add a “Display Notification” (from the Utilities library on the left) after the “Run Shell Script”. The action will display a notification once image processing is completed.&lt;/p&gt;

&lt;p&gt;Thank you for reading!&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Technical Blogs&quot;]" /><category term="macos" /><category term="automation" /><category term="fun" /><summary type="html">I just wanted to compress one image, but went to far…</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-02-14-image-compression-with-tinypng-from-macos-contextual-menu/cover.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-02-14-image-compression-with-tinypng-from-macos-contextual-menu/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Customizing mac1.metal EC2 AMI — new guts, more glory</title><link href="https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html" rel="alternate" type="text/html" title="Customizing mac1.metal EC2 AMI — new guts, more glory" /><published>2021-02-01T00:00:00+02:00</published><updated>2021-02-01T00:00:00+02:00</updated><id>https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/02/01/customizing-mac1-metal-ec2-ami.html">&lt;p&gt;I guess macOS was designed for a user, not for the ops or engineers, so this is why its customization and usage for CI/CD are not trivial (compared to something Linux-based). A smart guess, huh?&lt;/p&gt;

&lt;h1 id=&quot;configuration-management&quot;&gt;Configuration Management&lt;/h1&gt;
&lt;p&gt;Native Apple’s Mobile device management (a.k.a MDM) and Jamf is probably the most potent combination for macOS configuration. But as much as it’s mighty, it is a cumbersome combination, and Jamf is not free.&lt;/p&gt;

&lt;p&gt;Then we have Ansible, Chef, Puppet, SaltStack — they all are good with Linux, but what about macOS?&lt;/p&gt;

&lt;p&gt;I tried to search for use cases of mentioned CM tools for macOS. However, I concluded that they wrap the execution of native macOS command-line utilities most of the time.&lt;/p&gt;

&lt;p&gt;And if you search for the ‘macos’ word in Chef Supermarket or Puppet Forge, you won’t be impressed by the number of actively maintained packages. Although, here is a motivating article about using Chef &lt;a href=&quot;https://pspdfkit.com/blog/2016/chef-on-macos/&quot;&gt;automating-macos-provisioning-with-chef&lt;/a&gt; if you prefer it. I could not find something similar and fresh for Puppet, so I am sorry, Puppet fans.&lt;/p&gt;

&lt;p&gt;That is why I decided to follow the KISS principle and chose Ansible.&lt;/p&gt;

&lt;p&gt;It’s easy to write and read the configuration, it allows to group tasks and to add execution logic &lt;del&gt;, and it feels more DevOps executing shell commands inside Ansible tasks instead of shell scripts; I know you know that 😂&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;By the way, Ansible Galaxy does not have many management packages for macOS, either. But thankfully, it has the basics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_module.html#ansible-collections-community-general-homebrew-module&quot;&gt;homebrew&lt;/a&gt; with &lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_cask_module.html#ansible-collections-community-general-homebrew-cask-module&quot;&gt;homebrew_cask&lt;/a&gt; and &lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/community/general/homebrew_tap_module.html#ansible-collections-community-general-homebrew-tap-module&quot;&gt;homebrew_tap&lt;/a&gt; — to install software&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/community/general/launchd_module.html#ansible-collections-community-general-launchd-module&quot;&gt;launchd&lt;/a&gt; — to manage services&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.ansible.com/ansible/latest/collections/community/general/osx_defaults_module.html#ansible-collections-community-general-osx-defaults-module&quot;&gt;osx_defaults&lt;/a&gt; — to manage some user settings (not all!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I used Ansible to build the macOS AMI for CI/CD, so here are some tips for such a case.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Some values are hardcoded intentionally in the code examples for the sake of simplicity and easy reading. You would probably want to parametrize them.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;xcode-installation-example&quot;&gt;Xcode installation example&lt;/h2&gt;
&lt;p&gt;The following tasks will help you to automate the basics.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install Xcode&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xip&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--expand&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Xcode.xip&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/Applications&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Accept License Agreement&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-license&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;accept&quot;&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Accept License Agreement&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/Applications/Xcode.app/Contents/Developer/usr/bin/xcodebuild&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-runFirstLaunch&quot;&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Switch into newly installed Xcode context&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;xcode-select&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;--switch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/Applications/Xcode.app/Contents/Developer&quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;example-of-software-installation-with-brew&quot;&gt;Example of software installation with Brew&lt;/h2&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install common build software&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;community.general.homebrew&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;}}&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;latest&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swiftlint&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;swiftformat&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wget&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;screensharing-remote-desktop-configuration-example&quot;&gt;ScreenSharing (remote desktop) configuration example&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Turn On Remote Management&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./kickstart&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-activate&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-configure&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-allowAccessFor&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-specifiedUsers&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Enable Remote Management for CI user&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shell&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;./kickstart&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-configure&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-users&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ec2-user&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-access&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-privs&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;-all&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Shell rulez, yes.&lt;/p&gt;

&lt;h1 id=&quot;building-the-ami&quot;&gt;Building the AMI&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/assets/posts/2021-02-01-customizing-mac1-metal-ec2-ami/ami-build.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.packer.io/docs/builders/amazon/ebs&quot;&gt;Packer by HashiCorp&lt;/a&gt;, of course.&lt;/p&gt;

&lt;p&gt;I would love to compare Packer with EC2 Image Builder, but it &lt;a href=&quot;https://docs.aws.amazon.com/imagebuilder/latest/userguide/what-is-image-builder.html#image-builder-os&quot;&gt;does not support macOS&lt;/a&gt; yet (as of Feb’21).&lt;/p&gt;

&lt;p&gt;Packer configuration is straightforward, so I want to highlight only the things specific to the “mac1.metal” use case.&lt;/p&gt;

&lt;h2 id=&quot;timeouts&quot;&gt;Timeouts&lt;/h2&gt;
&lt;p&gt;As I mentioned in the &lt;a href=&quot;https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html&quot;&gt;previous article&lt;/a&gt;, the creation and deletion time of the “mac1.metal” Instance is significantly bigger than Linux. That is why you should raise the polling parameters for the builder.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nl&quot;&gt;&quot;aws_polling&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;delay_seconds&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;max_attempts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And it would be best if you also increased the SSH timeout:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ssh_timeout&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Fortunately, Packer’s AMI builder does not require an explicit declaration of the Dedicated Host ID. So you can just reference the same subnet where you allocated the Host, assuming you did it with the enabled “Auto placement” parameter during the host creation.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;tenancy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;subnet_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your-subnet-id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;provisioning&quot;&gt;Provisioning&lt;/h2&gt;
&lt;p&gt;Packer has &lt;a href=&quot;https://www.packer.io/docs/provisioners/ansible&quot;&gt;Ansible Provisioner&lt;/a&gt; that I used for the AMI. Its documentation is also very clean and straightforward.&lt;/p&gt;

&lt;p&gt;But it is still worth mentioning that if you want to parametrize the Ansible playbook, then the following configuration example will be handy:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;extra_arguments&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--extra-vars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your-variable-foo=your-value-bar]&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ansible_env_vars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ANSIBLE_PYTHON_INTERPRETER=auto_legacy_silent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ANSIBLE_OTHER_ENV_VARIABLE=other_value&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;configuration-at-launch&quot;&gt;Configuration at launch&lt;/h1&gt;
&lt;p&gt;If you’re familiar with AWS EC2, you probably know what the Instance &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user data&lt;/code&gt; is.&lt;/p&gt;

&lt;p&gt;A group of AWS developers made something similar for the macOS: &lt;a href=&quot;https://github.com/aws/ec2-macos-init&quot;&gt;EC2 macOS Init&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It does not support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cloud-init&lt;/code&gt; as on Linux-based Instances, but it can run shell scripts, which is quite enough.&lt;/p&gt;

&lt;p&gt;EC2 macOS Init utility is a Launch Daemon (macOS terminology) that runs on behalf of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user at system boot. It executes the commands according to the so-called Priority Groups, or the sequence in other words.&lt;/p&gt;

&lt;p&gt;The number of the group corresponds to the execution order. You can put several tasks into a single Priority Group, and the tool will execute them simultaneously.&lt;/p&gt;

&lt;p&gt;EC2 macOS Init uses a human-readable configuration file in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toml&lt;/code&gt; format.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;[[Module]]
  Name = &quot;Create-some-folder&quot;
  PriorityGroup = 3
  FatalOnError = false 
  RunPerInstance = true 
  [Module.Command]
    Cmd = [&quot;mkdir&quot;, &quot;/Users/ec2-user/my-directory&quot;] 
    RunAsUser = &quot;ec2-user&quot;
    EnvironmentVars = [&quot;MY_VAR_FOO=myValueBar&quot;]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I should clarify some things here.&lt;/p&gt;

&lt;p&gt;Modules — a set of pre-defined modules for different purposes. It is something similar to the Ansible modules.&lt;/p&gt;

&lt;p&gt;You can find the list of available modules here &lt;a href=&quot;https://github.com/aws/ec2-macos-init/tree/master/lib/ec2macosinit&quot;&gt;ec2-macos-init/lib/ec2macosinit&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunPerInstance&lt;/code&gt; directive controls whether a module should run. There are three of such directives, and here is what they mean:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunPerBoot&lt;/code&gt; — module will run at every system boot&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunPerInstance&lt;/code&gt; — module will run once for the Instance. Each Instance has a unique ID; the init tool fetches it from the AWS API before the execution and keeps its execution history per Instance ID. When you create a new Instance from the AMI, it will have a unique ID, and the module will run again.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunOnce&lt;/code&gt; — module will run only once, despite the instance ID change&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I mentioned the execution history above. When EC2 macOS Init runs on the Instance first time, it creates a unique directory with the name per Instance ID to store the execution history and user data copy.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunPerInstance&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RunOnce&lt;/code&gt; directives depend on the execution history, and modules with those directives will run again on the next boot if the previous execution failed. It was not obvious to me why RunOnce keeps repeating itself every boot until I dug into &lt;a href=&quot;https://github.com/aws/ec2-macos-init/blob/master/lib/ec2macosinit/module.go#L110&quot;&gt;the source code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, there is a module for user data. It runs at the end by default (priority group #4) and pulls the user data script from AWS API before script execution.&lt;/p&gt;

&lt;p&gt;I suggest looking into the default &lt;a href=&quot;https://github.com/aws/ec2-macos-init/blob/master/configuration/init.toml&quot;&gt;init.toml&lt;/a&gt; configuration file to get yourself more familiar with the capabilities of the tool.&lt;/p&gt;

&lt;p&gt;The init tool can also clear its history, which is useful for the new AMI creation.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ec2-macos-init clean &lt;span class=&quot;nt&quot;&gt;-all&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And you can run the init manually for debugging purposes.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;ec2-macos-init run
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also combine the EC2 macOS Init actions (made by modules) with your script in user data for more accurate nontrivial configurations.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;As a whole, building and operating macOS-based AMI does not differ from AMI management for other platforms.&lt;/p&gt;

&lt;p&gt;There are the same principle stages: prepare, clear, build, execute deployment script (if necessary). Though, the particular implementation of each step has its nuances and constraints.&lt;/p&gt;

&lt;p&gt;So the whole process may look as follows:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Provision and configure needed software with Ansible playbook&lt;/li&gt;
  &lt;li&gt;Clean-up system logs and EC2 macOS Init history (again, with Ansible task)&lt;/li&gt;
  &lt;li&gt;Create the AMI&lt;/li&gt;
  &lt;li&gt;Add more customizations at launch with EC2 macOS Init modules and user data (that also executes your Ansible playbook or shell commands)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Getting into all this was both fun and interesting. Sometimes painful, though. 😆&lt;/p&gt;

&lt;p&gt;I sincerely hope this article was helpful to you. Thank you for reading!&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Technical Blogs&quot;]" /><category term="aws" /><category term="ansible" /><category term="packer" /><category term="automation" /><category term="devops" /><category term="macos" /><summary type="html">I guess macOS was designed for a user, not for the ops or engineers, so this is why its customization and usage for CI/CD are not trivial (compared to something Linux-based). A smart guess, huh?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-02-01-customizing-mac1-metal-ec2-ami/cover.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-02-01-customizing-mac1-metal-ec2-ami/cover.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Terraforming mac1.metal at AWS</title><link href="https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html" rel="alternate" type="text/html" title="Terraforming mac1.metal at AWS" /><published>2021-01-20T00:00:00+02:00</published><updated>2021-01-20T00:00:00+02:00</updated><id>https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/01/20/terraforming-mac1-metal-at-AWS.html">&lt;p&gt;Recently AWS &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/&quot;&gt;announced&lt;/a&gt; the support for Mac mini instances.&lt;/p&gt;

&lt;p&gt;I believe this is huge, even despite the many constraints this solution has. Oh, and the price is as huge as the announcement as well.&lt;/p&gt;

&lt;p&gt;But still, this offering opens the door to seamless macOS CI/CD integration into existing AWS infrastructure.&lt;/p&gt;

&lt;p&gt;Here is a tip for engineers like me who decided to give this new instance type a try: managing a dedicated host for the “mac1.metal” instance using Terraform.&lt;/p&gt;

&lt;p&gt;“mac1.metal” instance requires a dedicated host to be placed onto. This is a real Mac mini with a bit of magic from AWS.&lt;/p&gt;

&lt;p&gt;As of 10 Jan 2021, the AWS Terraform provider does not have a dedicated host resource.&lt;/p&gt;

&lt;p&gt;So we must solve this using  CloudFormation… in Terraform!&lt;/p&gt;

&lt;div class=&quot;language-hcl highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nx&quot;&gt;variable&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;availability_zone&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;us-east-1a&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;random_pet&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;runner_name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;prefix&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mac-metal-&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;separator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_cloudformation_stack&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dedicated_host&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random_pet&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;runner_name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;timeout_in_minutes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;template_body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STACK&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
{
  &quot;Resources&quot; : {
    &quot;MyDedicatedHost&quot;: {
      &quot;Type&quot; : &quot;AWS::EC2::Host&quot;,
      &quot;Properties&quot; : {
          &quot;AutoPlacement&quot; : &quot;on&quot;,
          &quot;AvailabilityZone&quot; : &quot;${var.availability_zone}&quot;,
          &quot;HostRecovery&quot; : &quot;off&quot;,
          &quot;InstanceType&quot; : &quot;mac1.metal&quot;
        }
    }
  },
  &quot;Outputs&quot; : {
    &quot;HostID&quot; : {
      &quot;Description&quot;: &quot;Host ID&quot;,
      &quot;Value&quot; : { &quot;Ref&quot; : &quot;MyDedicatedHost&quot; }
    }
  }
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;STACK
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;dedicated_host_id&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;aws_cloudformation_stack&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dedicated_host&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HostID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you pass HostID to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws_instance&lt;/code&gt; resource, and you have mac1.metal up and running!&lt;/p&gt;

&lt;p&gt;I like to make boring technical things a bit less boring, so I decided to add a random pet name. Just for fun, why not.&lt;/p&gt;

&lt;p&gt;You can wrap this into a module or add a count meta-argument to make it more versatile.&lt;/p&gt;

&lt;p&gt;Simple as that, yes. But now, you can integrate it into your CI system (if you have enough courage and money 😄) and have the Mac instance with the underlying host in a bundle.&lt;/p&gt;

&lt;p&gt;Thanks for reading me!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;em&gt;credits for cover image: &lt;a href=&quot;https://www.youtube.com/watch?v=Pn3miC_tTH0&quot;&gt;AWS EC2 Mac Instances Launch - macOS in the cloud for the first time, with the benefits of EC2&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Technical Blogs&quot;]" /><category term="aws" /><category term="terraform" /><category term="automation" /><category term="devops" /><summary type="html">Recently AWS announced the support for Mac mini instances.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-01-20-terraforming-mac1-metal-at-AWS.jpg" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-01-20-terraforming-mac1-metal-at-AWS.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">mac1.metal EC2 Instance — user experience</title><link href="https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html" rel="alternate" type="text/html" title="mac1.metal EC2 Instance — user experience" /><published>2021-01-19T00:00:00+02:00</published><updated>2021-01-19T00:00:00+02:00</updated><id>https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience</id><content type="html" xml:base="https://serhii.vasylenko.info/2021/01/19/mac1-metal-EC2-Instance-user-experience.html">&lt;h2 id=&quot;amazon-ec2-mac-instances&quot;&gt;Amazon EC2 Mac Instances&lt;/h2&gt;

&lt;p&gt;Something cool and powerful with inevitable trade-offs. As everything in this world.&lt;/p&gt;

&lt;p&gt;AWS announced EC2 macOS-based instances on the 30th of November 2020, and after more than a month of tests, I would like to share some findings and impressions about it.&lt;/p&gt;

&lt;p&gt;First of all, the things you can easily find, but it’s still worth to say:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The new instance family is called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mac1.metal&lt;/code&gt;. Guess we should expect mac2 or mac3; otherwise, why did they put a number in the name?&lt;/li&gt;
  &lt;li&gt;They added &lt;a href=&quot;https://aws.amazon.com/ec2/nitro/&quot;&gt;AWS Nitro System&lt;/a&gt; to integrate them with many AWS services.&lt;/li&gt;
  &lt;li&gt;The Instance must be placed onto a &lt;a href=&quot;https://aws.amazon.com/ec2/dedicated-hosts/&quot;&gt;Dedicated Host&lt;/a&gt;. Only one Instance per Host is allowed because the Host is an actual Mac Mini in that case.&lt;/li&gt;
  &lt;li&gt;You don’t pay anything for the Instance itself, but you pay for the Dedicated Host leasing — $1.083, and the minimum lease time is 24 hours. So the launch of the “mac1.metal” Instance costs $26 at minimum. Prices provided for the cheapest region — North Virginia.&lt;/li&gt;
  &lt;li&gt;You can apply &lt;a href=&quot;https://docs.aws.amazon.com/savingsplans/latest/userguide/what-is-savings-plans.html&quot;&gt;Saving Plans&lt;/a&gt; to save some money.&lt;/li&gt;
  &lt;li&gt;Mojave (10.14) and Catalina (10.15) are supported at the moment, with &lt;a href=&quot;https://aws.amazon.com/ec2/instance-types/mac/&quot;&gt;“support for macOS Big Sur (11.0) coming soon”&lt;/a&gt;. I expect it to be in 2021, though.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-can-it-do&quot;&gt;What can it do&lt;/h2&gt;

&lt;p&gt;Here is a list of some features that the “mac1.metal” instance has:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It lives in your VPC because it is an EC2 Instance so that you can access many other services.&lt;/li&gt;
  &lt;li&gt;It supports the new gp3 EBS type (and other types as well).&lt;/li&gt;
  &lt;li&gt;It supports SSM Agent and Session Manager.&lt;/li&gt;
  &lt;li&gt;It has several AWS tools pre-installed.&lt;/li&gt;
  &lt;li&gt;It has pre-installed Enhanced Network Interface drivers. My test upload/download to S3 was about 300GB/s.&lt;/li&gt;
  &lt;li&gt;It can report CPU metrics to CloudWatch (if you ever need it, though).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-cant-it-do&quot;&gt;What can’t it do&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;It can’t be used in Auto Scaling because of a Dedicated Host.&lt;/li&gt;
  &lt;li&gt;It can’t recognize the attached EBS if you connected it while the Instance was running — you must reboot the Instance to make it visible.&lt;/li&gt;
  &lt;li&gt;It does not support several services that rely on additional custom software, such as “EC2 Instance Connect” and “AWS Inspect.” But I think that AWS will add macOS distros for those soon.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;launching-the-instance&quot;&gt;Launching the Instance&lt;/h2&gt;

&lt;p&gt;Jeff Bar &lt;a href=&quot;https://aws.amazon.com/blogs/aws/new-use-mac-instances-to-build-test-macos-ios-ipados-tvos-and-watchos-apps/&quot;&gt;published&lt;/a&gt; an excellent how-to about kickstart of the “mac1.metal”, so I will focus on things he did not mention.&lt;/p&gt;

&lt;p&gt;Once you allocated the Dedicated Host and launched an Instance on it, the underlying system connects the EBS with a root file system to the Mac Mini.&lt;/p&gt;

&lt;p&gt;It is an AMI with 32G EBS (as per Jan’21) with macOS pre-installed.&lt;/p&gt;

&lt;p&gt;That means two things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The built-it physical SSD is still there and still yours to use; however, AWS does not manage or support the Apple hardware’s internal SSD.&lt;/li&gt;
  &lt;li&gt;You must resize the disk manually (if you specified the EBS size to be more than 32G)[1].&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The time from the Instance launch till you’re able to SSH into it varies between 15 and 20 minutes.&lt;/p&gt;

&lt;p&gt;You have the option to access it over SSH with your private key. If you need to set up Screen Sharing, you have to allow it through the “kickstart” command-line utility and setting the user password [2].&lt;/p&gt;

&lt;h2 id=&quot;destroying-the-instance&quot;&gt;Destroying the Instance&lt;/h2&gt;

&lt;p&gt;What an easy thing to do, right? Well, it depends.&lt;/p&gt;

&lt;p&gt;When you click on the “Terminate” item in the Instance actions menu, the complex Instance scrubbing process begins.&lt;/p&gt;

&lt;p&gt;AWS wants to make sure that anyone who uses the Host (Mac mini) after you will get your data stored neither on disks (including physical SSD mentioned earlier), nor inside memory or NVRAM, nor anywhere else. They do not share the info about this scrubbing process’s details, but it takes more than an hour to complete.&lt;/p&gt;

&lt;p&gt;When scrubbing is started, the Dedicated Host transitions to the Pending state. Dedicated Host transitions to Available state once scrubbing is finished. But you must wait for another 10-15 minutes to be able to release it finally.&lt;/p&gt;

&lt;p&gt;I don’t know why they set the Available state value earlier than the Host is available for operations, but this is how it works now (Jan’21).&lt;/p&gt;

&lt;p&gt;Therefore, you can launch the next Instance on the same Host not earlier than ~1,5 hours after you terminated the previous. That doesn’t seem very pleasant in the first couple of weeks, but you will get used to it. 😄&lt;/p&gt;

&lt;p&gt;And again: you can release the “mac1.metal” Dedicated Host not earlier than 24 hours after it was allocated. So plan your tests wisely.&lt;/p&gt;

&lt;h2 id=&quot;legal-things&quot;&gt;Legal things&lt;/h2&gt;

&lt;p&gt;I could not find it on a documentation page, but A Cloud Guru folks &lt;a href=&quot;https://acloudguru.com/blog/engineering/what-you-need-to-know-about-awss-new-ec2-mac-instances&quot;&gt;say&lt;/a&gt; that you must use new Instances solely for developer services, and you must agree to all of the EULAs.&lt;/p&gt;

&lt;p&gt;Sounds reasonable to me, but that could be written somewhere in the docs still, at least. Please let me know if you found it there.&lt;/p&gt;

&lt;h2 id=&quot;some-more-cool-stuff-to-check&quot;&gt;Some more cool stuff to check:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aws/ec2-macos-init&quot;&gt;EC2 macOS Init&lt;/a&gt; launch daemon, which is used to initialize Mac instances.
&lt;a href=&quot;https://github.com/aws/homebrew-aws&quot;&gt;EC2 macOS Homebrew Tap&lt;/a&gt; (Third-Party Repository) with several management tools which come pre-installed into macOS AMI from AWS.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Indeed it is powerful, and it has its trade-offs, such as price and some technical constraints. But it is a real MacOS device natively integrated into the AWS environment. So I guess it worth to be tried!&lt;/p&gt;

&lt;p&gt;Thanks for reading this! Stay tuned for more user experience feedback about baking custom AMI’s, automated software provisioning with Ansible, and other adventures with mac1.metal!&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;[1] How to resize the EBS at mac1.metal in Terminal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Get the identifier of EBS (look for the first one with GUID_partition_scheme):&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskutil list physical external&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Or here is a more advanced version to be used in a script:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;DISK_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;diskutil list physical external | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GUID_partition_scheme'&lt;/span&gt;| &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f6&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would probably be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk0&lt;/code&gt; if you did not attach additional EBS.&lt;/p&gt;

&lt;p&gt;Then run the repair job for the disk, using its identifier:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskutil repairDisk disk0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Advanced version:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;yes&lt;/span&gt; | diskutil repairDisk &lt;span class=&quot;nv&quot;&gt;$DISK_ID&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now get the APFS container identifier (look for Apple_APFS):
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskutil list physical external&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Advanced version:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nv&quot;&gt;APFS_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;diskutil list physical external | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Apple_APFS'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f8&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It would probably be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;disk0s2&lt;/code&gt; if you did not attach additional EBS.&lt;/p&gt;

&lt;p&gt;Finally, resize the APFS container:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskutil apfs resizeContainer disk0s2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Advanced version&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;diskutil apfs resizeContainer &lt;span class=&quot;nv&quot;&gt;$APFS_ID&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;[2]How to setup Screen Sharing at mac1.metal in Terminal&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kickstart&lt;/code&gt; command-line tool resides in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/&lt;/code&gt; so you’ll better to cd into that directory for convenience:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c&quot;&gt;# Turn On Remote Management for a user to be specified later&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./kickstart &lt;span class=&quot;nt&quot;&gt;-activate&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-configure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-allowAccessFor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-specifiedUsers&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Enable Remote Management for ec2-user user&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./kickstart &lt;span class=&quot;nt&quot;&gt;-configure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-users&lt;/span&gt; ec2-user &lt;span class=&quot;nt&quot;&gt;-access&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-on&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-privs&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-all&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Set the user password &lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;passwd ec2-user
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Review&quot;]" /><category term="aws" /><category term="macos" /><summary type="html">Amazon EC2 Mac Instances</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2021-01-19-mac1-metal-EC2-Instance-user-experience.jpg" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2021-01-19-mac1-metal-EC2-Instance-user-experience.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">AWS CloudShell</title><link href="https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html" rel="alternate" type="text/html" title="AWS CloudShell" /><published>2020-12-16T00:00:00+02:00</published><updated>2020-12-16T00:00:00+02:00</updated><id>https://serhii.vasylenko.info/2020/12/16/aws-cloudshell</id><content type="html" xml:base="https://serhii.vasylenko.info/2020/12/16/aws-cloudshell.html">&lt;p&gt;A simple but cool announcement from AWS — &lt;a href=&quot;https://aws.amazon.com/cloudshell/&quot;&gt;AWS CloudShell&lt;/a&gt;.
A tool for ad-hoc AWS management via CLI directly in your browser.&lt;/p&gt;

&lt;p&gt;I like when AWS releases something simple to understand and yet powerful.&lt;br /&gt;
So it is not another &lt;a href=&quot;https://aws.amazon.com/devops-guru/&quot;&gt;DevOps Guru&lt;/a&gt;, believe me :)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Yes, this is similar to the shells that GCE and Azure have.&lt;/li&gt;
  &lt;li&gt;No, you can’t access your instances from it, so it’s not a jump server (bastion host).&lt;/li&gt;
  &lt;li&gt;Yes, it has AWS CLI and other tools pre-installed. Even Python and Node.js.&lt;/li&gt;
  &lt;li&gt;No, you can’t (well, you can, but should not) use it as an alternative to the day-to-day console on your laptop.&lt;/li&gt;
  &lt;li&gt;Yes, you can manage all resources from that shell as much as your IAM permissions allow you (even with SSO, which is pretty cool).&lt;/li&gt;
  &lt;li&gt;No, it does not support Docker.&lt;/li&gt;
  &lt;li&gt;Yes, you have 1 GB of permanent storage and the ability to transfer files in and out.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;more-yes-and-nos-here&quot;&gt;More Yes and No’s here:&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html&quot;&gt;https://docs.aws.amazon.com/cloudshell/latest/userguide/faq-list.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cloudshell/faqs/&quot;&gt;https://aws.amazon.com/cloudshell/faqs/&lt;/a&gt;&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Review&quot;]" /><category term="aws" /><summary type="html">A simple but cool announcement from AWS — AWS CloudShell. A tool for ad-hoc AWS management via CLI directly in your browser.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2020-12-16-aws-cloudshell.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2020-12-16-aws-cloudshell.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Terraform Workflow — Working Individually and in a Team</title><link href="https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html" rel="alternate" type="text/html" title="Terraform Workflow — Working Individually and in a Team" /><published>2020-09-16T00:00:00+03:00</published><updated>2020-09-16T00:00:00+03:00</updated><id>https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team</id><content type="html" xml:base="https://serhii.vasylenko.info/2020/09/16/terraform-workflow-working-individually-and-in-a-team.html">&lt;p&gt;The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.&lt;/p&gt;

&lt;p&gt;It is extremely helpful in a team, and can benefit you even if you work individually. A good workflow enables you to streamline a process, organize it, and make it less error-prone.&lt;/p&gt;

&lt;p&gt;This article summaries several approaches when working with Terraform, both individually and in a team. I tried to gather the most common ones, but you might also want to develop your own.&lt;/p&gt;

&lt;p&gt;The common requirement for all of them is a version control system (such as Git). This is how you ensure nothing is lost and all your code changes are properly versioned tracked.&lt;/p&gt;

&lt;p&gt;Table of contents:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#basic-concepts&quot;&gt;Basic Concepts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#core-individual-workflow&quot;&gt;Core individual workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#core-team-workflow&quot;&gt;Core team workflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#team-workflow-with-automation&quot;&gt;Team workflow with automation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#import-workflow&quot;&gt;Import workflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;basic-concepts&quot;&gt;Basic Concepts&lt;/h1&gt;
&lt;p&gt;Let’s define the basic actions first.&lt;/p&gt;

&lt;p&gt;All described workflows are built on top of three key steps: Write, Plan, and Apply. Nevertheless, their details and actions vary between workflows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflow.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;It’s a piece of cake, isn’t it? 😆&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Write&lt;/strong&gt; – this is where you make changes to the code.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Plan&lt;/strong&gt; – this is where you review changes and decide whether to accept them.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Apply&lt;/strong&gt; – this is where you accept changes and apply them against real infrastructure.&lt;/p&gt;

&lt;p&gt;It’s a simple idea with a variety of possible implementations.&lt;/p&gt;

&lt;h1 id=&quot;core-individual-workflow&quot;&gt;Core individual workflow&lt;/h1&gt;
&lt;p&gt;This is the most simple workflow if you work alone on a relatively small TF project. This workflow suits both local and remote backends well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflow-individual.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Let’s add a bit of Git&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;write&quot;&gt;Write&lt;/h3&gt;
&lt;p&gt;You clone the remote code repo or pull the latest changes, edit the configuration code, then run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform validate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform fmt&lt;/code&gt; commands to make sure your code works well.&lt;/p&gt;

&lt;h3 id=&quot;plan&quot;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where you run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; command to make sure that your changes do what you need. This is a good time to commit your code changes changes (or you can do it in the next step).&lt;/p&gt;

&lt;h3 id=&quot;apply&quot;&gt;Apply&lt;/h3&gt;
&lt;p&gt;This is when you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; and introduce the changes to real infrastructure objects. Also, this is when you push committed changes to the remote repository.&lt;/p&gt;

&lt;h1 id=&quot;core-team-workflow&quot;&gt;Core team workflow&lt;/h1&gt;
&lt;p&gt;This workflow is good for when you work with configuration code in a team and want to use feature branches to manage the changes accurately.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-core-workflow-team.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;Don’t get scared, it is still simple, just follow the lines&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;write-1&quot;&gt;Write&lt;/h3&gt;
&lt;p&gt;Start by checking out a new branch, make your changes, and run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform validate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform fmt&lt;/code&gt; commands to make sure your code works well.&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; at this step will help ensure that you’ll get what you expect.&lt;/p&gt;

&lt;h3 id=&quot;plan-1&quot;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where code and plan reviews happen.&lt;/p&gt;

&lt;p&gt;Add the output of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; command to the Pull Request with your changes. It would be a good idea to add only the changed parts of the common output, which is the part that starts with “Terraform will perform the following actions” string.&lt;/p&gt;

&lt;h3 id=&quot;apply-1&quot;&gt;Apply&lt;/h3&gt;
&lt;p&gt;Once the PR is reviewed and merged to the upstream branch, it is safe to finally pull the upstream branch locally and apply the configuration with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;team-workflow-with-automation&quot;&gt;Team workflow with automation&lt;/h1&gt;
&lt;p&gt;In a nutshell, this workflow allows you to introduce a kind of smoke test for your infrastructure code (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt;) and also to automate the feedback in the CI process.&lt;/p&gt;

&lt;p&gt;The automated part of this workflow consists of a speculative plan on commit and/or Pull Request (PR ), along with adding the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plan&lt;/code&gt; to the comment of the PR. A speculative plan mean just to show the changes, and not apply them afterward.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflow-team-automation-1.png&quot; alt=&quot;&quot; /&gt;
&lt;em&gt;I like when TF plan output is included to PR, but nobody likes to read others TF plans for some reason…&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;write-2&quot;&gt;Write&lt;/h3&gt;
&lt;p&gt;This step is the same as in the previous workflow.&lt;/p&gt;

&lt;h3 id=&quot;plan-2&quot;&gt;Plan&lt;/h3&gt;
&lt;p&gt;This is where your CI tool does its job.&lt;/p&gt;

&lt;p&gt;Let’s review this step by step:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You create a PR with the code changes you wish to implement.&lt;/li&gt;
  &lt;li&gt;The CI pipeline is triggered by an event from your code repository (such as webhook push) and it runs a speculative plan against your code.&lt;/li&gt;
  &lt;li&gt;The list of changes (a so-called “plan diff”) is added to PR for review by the CI.&lt;/li&gt;
  &lt;li&gt;Once merged, the CI pipeline runs again and you get the final plan that’s ready to be applied to the infrastructure.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;apply-2&quot;&gt;Apply&lt;/h3&gt;

&lt;p&gt;Now that you have a branch (i.e. main) with the fresh code to apply, you need to pull it locally and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can also add the automated apply here – step 5 in the picture below. This may be very useful for disposable environments such as testing, staging, development, and so on.&lt;/p&gt;

&lt;p&gt;The exact CI tool to be used here is up to you: Jenkins, GitHub Actions, and Travis CI all work well.&lt;/p&gt;

&lt;p&gt;An important thing to note is that the CI pipeline must be configured in a bi-directional way with your repository to get the code from it and report back with comments to PR.&lt;/p&gt;

&lt;p&gt;As an option, you may consider using Terraform Cloud which has a lot of functionality, including the above mentioned repo integration, even with the free subscription.&lt;/p&gt;

&lt;p&gt;If you have never worked with Terraform Cloud before and want to advice to get started, I’ll provide the links at the end of this article.&lt;/p&gt;

&lt;h1 id=&quot;import-workflow&quot;&gt;Import workflow&lt;/h1&gt;
&lt;p&gt;This workflow refers to a situation when you have some objects already created (i.e., up and running), and you need to manage them with Terraform.&lt;/p&gt;

&lt;p&gt;Suppose we already have an S3 bucket in AWS called “someassetsbucket” and we want to include it into our configuration code.‌‌&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflow-import.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;prepare&quot;&gt;Prepare&lt;/h3&gt;
&lt;p&gt;You should create a resource block to be used later for the real object you’re going to import.&lt;/p&gt;

&lt;p&gt;You don’t need to fill the arguments in it at the start, so it may be just a blank resource block, for example:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;resource &quot;aws_s3_bucket&quot; &quot;someassetsbucket&quot; {
‌‌
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;import&quot;&gt;Import&lt;/h3&gt;
&lt;p&gt;Now you need to import the information about the real object into your existing Terraform state file.&lt;/p&gt;

&lt;p&gt;This can be done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform import&lt;/code&gt; command, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;terraform import aws_s3_bucket.assets &quot;someassetsbucket&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;‌Be sure to also check the list of possible options import accepts with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform import -h&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;write-3&quot;&gt;Write&lt;/h3&gt;
&lt;p&gt;Now you need to write the corresponding Terraform code for this bucket.&lt;/p&gt;

&lt;p&gt;To avoid modifying your real object on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; action, you should specify all needed arguments with the exact values from the import phase.&lt;/p&gt;

&lt;p&gt;You can see the details by running the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform state show&lt;/code&gt; command, for example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;terraform state show aws_s3_bucket.assets
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The output of this command will be very similar to the configuration code. But it contains both arguments and attributes of the resource, so you need to clean it up before applying it.&lt;/p&gt;

&lt;p&gt;You can use one of the following tactics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;either copy/paste it, and then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform validate&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; several times to make sure there are no errors like “argument is not expected here” or “this field cannot be set”&lt;/li&gt;
  &lt;li&gt;or you can pick and write only the necessary arguments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In any case, be sure to refer to the documentation of the resource during this process.&lt;/p&gt;

&lt;h3 id=&quot;plan-3&quot;&gt;Plan&lt;/h3&gt;
&lt;p&gt;The goal is to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform plan&lt;/code&gt; output showing “~ update in-place” changes only.&lt;/p&gt;

&lt;p&gt;However, it is not always clear whether the real object will be modified or only the state file will be updated. This is why you should understand how a real object works and know its life cycle to make sure it is safe to apply the plan.&lt;/p&gt;

&lt;h3 id=&quot;apply-3&quot;&gt;Apply&lt;/h3&gt;
&lt;p&gt;This is usual the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;terraform apply&lt;/code&gt; action.&lt;/p&gt;

&lt;p&gt;Once applied, your configuration and state file will correspond to the real object configuration.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;Here is an overview of Terraform Cloud for those who never worked with it before: &lt;a href=&quot;https://www.terraform.io/docs/cloud/overview.html&quot;&gt;‌‌Overview of Terraform Cloud Features&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here is a nice tutorial to start with: &lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/cloud-get-started&quot;&gt;Get Started - Terraform Cloud&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, here is an overview of workflows at scale from the HashiCorp CTO which might be useful for more experienced Terraform users: &lt;a href=&quot;https://www.hashicorp.com/resources/terraform-workflow-best-practices-at-scale&quot;&gt;Terraform Workflow Best Practices at Scale&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thank you for reading. I hope you will try one of these workflows, or develop your own!‌‌&lt;/p&gt;

&lt;hr /&gt;
&lt;h6 id=&quot;this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers&quot;&gt;This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.&lt;/h6&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Learning&quot;]" /><category term="terraform" /><summary type="html">The work with Terraform code may become tangled sometimes. Here are some guides on how to streamline it and make it transparent for you and your team.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflows.jpeg" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2020-09-16-terraform-workflow-working-individually-and-in-a-team/tf-workflows.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Terraform Certification Tips</title><link href="https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html" rel="alternate" type="text/html" title="Terraform Certification Tips" /><published>2020-09-15T00:00:00+03:00</published><updated>2020-09-15T00:00:00+03:00</updated><id>https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips</id><content type="html" xml:base="https://serhii.vasylenko.info/2020/09/15/terraform-certification-tips.html">&lt;p&gt;I successfully passed the “HashiCorp Certified — Terraform Associate” exam last Friday and decided to share some advice for exam preparation.&lt;/p&gt;

&lt;h2 id=&quot;make-yourself-a-plan&quot;&gt;Make yourself a plan&lt;/h2&gt;
&lt;p&gt;Make a list of things you are going to go through: links to the study materials, practice tasks, some labs, some articles on relative blogs (Medium, Dev.to, etc.).
It should look at a “todo” or “check”-list. It may seem silly at first glance, but the list with checkboxes does its “cognitive magic”. When you go point by point, marking items as “done”, you feel the progress and this motivates you to keep going further.
For example, you can make a plan from the resources I outlined below in this article.&lt;/p&gt;

&lt;p&gt;I encourage you to explore the Internet for something by yourself as well. Who knows, perhaps you will find some learning course that fits you better. And that is great! However, when you find it, take extra 5-10 minutes to go through its curriculum and create a list with lessons.&lt;/p&gt;

&lt;p&gt;It feels so nice to cross out items off the todo list, believe me 😄
&lt;img src=&quot;/assets/posts/2020-09-15-terraform-certification-tips/todo-list.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;go-through-the-official-study-guide&quot;&gt;Go through the official Study Guide&lt;/h2&gt;
&lt;p&gt;Despite your findings on the Internet, I strongly suggest going through the official study guide&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://learn.hashicorp.com/tutorials/terraform/associate-study&quot;&gt;Study Guide - Terraform Associate Certification&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It took me about 20 hours to complete it (including practice tasks based on topics in the guide), and it was the core of my studying. I did not buy or search for some third-party course intentionally because I did have some Terraform experience before starting the preparation. But give the official guide a chance even if you found some course. It is well-made and matches real exam questions very precisely.&lt;/p&gt;

&lt;p&gt;Also, there is an official &lt;a href=&quot;https://learn.hashicorp.com/tutorials/terraform/associate-review&quot;&gt;Exam Review&lt;/a&gt;. Someone might find this even better because it is a direct mapping of each exam objective to HashiCorp’s documentation and training.&lt;/p&gt;

&lt;h2 id=&quot;take-additional-tutorials&quot;&gt;Take additional tutorials&lt;/h2&gt;
&lt;p&gt;Here is a list of additional tutorials and materials I suggest adding into your learning program:&lt;/p&gt;

&lt;h4 id=&quot;official-guides--documentation&quot;&gt;Official guides / documentation:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/automation&quot;&gt;Automate Terraform&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/cloud&quot;&gt;Collaborate using Terraform Cloud&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/0-13&quot;&gt;Terraform tutorials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/modules&quot;&gt;Reuse Configuration with Modules&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.hashicorp.com/resources/a-practitioner-s-guide-to-using-hashicorp-terraform-cloud-with-github&quot;&gt;A Practitioner’s Guide to Using HashiCorp Terraform Cloud with GitHub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/policy&quot;&gt;Enforce Policy with Sentinel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;third-party-articles-and-guides&quot;&gt;Third-party articles and guides:&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://prefetch.net/blog/2020/04/27/using-the-terraform-console-to-debug-interpolation-syntax/&quot;&gt;Using the terraform console to debug interpolation syntax&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PL5VXZTK6spA2HF5Kf0rI9RDRHF9Hopffr&quot;&gt;YouTube playlist with exam-like questions review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;find-yourself-some-practice&quot;&gt;Find yourself some practice&lt;/h2&gt;
&lt;h4 id=&quot;mockup-a-project&quot;&gt;Mockup a project&lt;/h4&gt;
&lt;p&gt;You can greatly improve your practice by mocking some real business cases.&lt;/p&gt;

&lt;p&gt;If you already work in some company you can set up the project you’re working with using Terraform. If you don’t have a real project or afraid to accidentally violate NDA, try this open-source demo project: &lt;a href=&quot;https://github.com/gothinkster/realworld&quot;&gt;Real World Example Apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a collection of different codebases for front-end and back-end used to build the same project. Just find the combination that suits your experience better and try to build the infrastructure for it using Terraform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-15-terraform-certification-tips/real-world-demo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;answer-forum-topics&quot;&gt;Answer forum topics&lt;/h4&gt;
&lt;p&gt;Last but not least advice — try to answer some questions on the official &lt;a href=&quot;https://discuss.hashicorp.com/c/terraform-core/&quot;&gt;Terraform forum&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a nice way to test your knowledge, help others, and develop the community around Terraform. Just register there, look for the latest topics, and have fun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-15-terraform-certification-tips/tf-forum.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;🍀 I sincerely wish you exciting preparation and a successful exam! 🍀&lt;/p&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Learning&quot;]" /><category term="terraform" /><summary type="html">I successfully passed the “HashiCorp Certified — Terraform Associate” exam last Friday and decided to share some advice for exam preparation.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2020-09-15-terraform-certification-tips/terraform-associate.png" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2020-09-15-terraform-certification-tips/terraform-associate.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What are terraform Modules and how do they work?</title><link href="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html" rel="alternate" type="text/html" title="What are terraform Modules and how do they work?" /><published>2020-09-09T00:00:00+03:00</published><updated>2020-09-09T00:00:00+03:00</updated><id>https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained</id><content type="html" xml:base="https://serhii.vasylenko.info/2020/09/09/terraform-modules-explained.html">&lt;p&gt;Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.&lt;/p&gt;

&lt;p&gt;I assume you already know some basics about Terraform or even tried to use it in some way before reading the article.&lt;/p&gt;

&lt;p&gt;Please note: I do not use real code examples with some specific provider like AWS or Google intentionally, just for the sake of simplicity.&lt;/p&gt;

&lt;h2 id=&quot;terraform-modules&quot;&gt;Terraform modules&lt;/h2&gt;
&lt;p&gt;You already write modules even if you think you don’t.&lt;/p&gt;

&lt;p&gt;Even when you don’t create a module intentionally, if you use Terraform, you are already writing a module – a so-called “root” module.&lt;/p&gt;

&lt;p&gt;Any number of Terraform configuration files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(.tf)&lt;/code&gt; in a directory (even one) forms a module.&lt;/p&gt;

&lt;h3 id=&quot;what-does-the-module-do&quot;&gt;What does the module do?&lt;/h3&gt;
&lt;p&gt;A Terraform module allows you to create logical abstraction on the top of some resource set. In other words, a module allows you to group resources together and reuse this group later, possibly many times.&lt;/p&gt;

&lt;p&gt;Let’s assume we have a virtual server with some features hosted in the cloud. What set of resources might describe that server? For example:
– the virtual machine itself (created from some image)
– an attached block device of specified size (for additional storage)
– a static public IP mapped to the server’s virtual network interface
– a set of firewall rules to be attached to the server
– something else… (i.e. another block device, additional network interface, etc)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-09-terraform-modules-explained/1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s assume that you need to create this server with a set of resources many times. This is where modules are really helpful – you don’t want to repeat the same configuration code over and over again, do you?&lt;/p&gt;

&lt;p&gt;Here is an example that illustrates how our “server” module might be called.
“To call a module” means to use it in the configuration file.&lt;/p&gt;

&lt;p&gt;Here we create 5 instances of the “server” using single set of configurations (in the module):&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module &quot;server&quot; {
    
    count         = 5
    
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modules-organisation-child-and-root&quot;&gt;Modules organisation: child and root&lt;/h3&gt;
&lt;p&gt;Of course, you would probably want to create more than one module. Here are some common examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;for a network (i.e. VPC)&lt;/li&gt;
  &lt;li&gt;for a static content hosting (i.e. buckets)&lt;/li&gt;
  &lt;li&gt;for a load balancer and it’s related resources&lt;/li&gt;
  &lt;li&gt;for a logging configuration&lt;/li&gt;
  &lt;li&gt;and whatever else you consider a distinct logical component of the infrastructure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s say we have two different modules: a “server” module and a “network” module. The module called “network” is where we define and configure our virtual network and place servers in it:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module &quot;server&quot; {
    source        = &quot;./module_server&quot;
    some_variable = some_value
}

module &quot;network&quot; {  
    source              = &quot;./module_network&quot;
    some_other_variable = some_other_value
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once we have some custom modules, we can refer to them as “child” modules. And the configuration file where we call child modules relates to the root module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-09-terraform-modules-explained/2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A child module can be sourced from a number of places:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;local paths&lt;/li&gt;
  &lt;li&gt;official Terraform Registry (if you’re familiar with other registries, i.e. Docker Registry then you already understand the idea)&lt;/li&gt;
  &lt;li&gt;Git repository (a custom one or GitHub/BitBucket)&lt;/li&gt;
  &lt;li&gt;HTTP URL to .zip archive with module&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But how can you pass resources details between modules?&lt;/p&gt;

&lt;p&gt;In our example, the servers should be created in a network. So how can we tell the “server” module to create VMs in a network which was created in a module called “network”?&lt;/p&gt;

&lt;p&gt;This is where &lt;strong&gt;encapsulation&lt;/strong&gt; comes in.&lt;/p&gt;

&lt;h2 id=&quot;module-encapsulation&quot;&gt;Module encapsulation&lt;/h2&gt;
&lt;p&gt;Encapsulation in Terraform consists of two basic concepts: module scope and explicit resources exposure.&lt;/p&gt;

&lt;h3 id=&quot;module-scope&quot;&gt;Module Scope&lt;/h3&gt;
&lt;p&gt;All resource instances, names, and therefore, resource visibility, are isolated in a module’s scope. For example, module “A” can’t see and does not know about resources in module “B” by default.&lt;/p&gt;

&lt;p&gt;Resource visibility, sometimes called resource isolation, ensures that resources will have unique names within a module’s namespace. For example, with our 5 instances of the “server” module:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module.server[0].resource_type.resource_name
module.server[1].resource_type.resource_name
module.server[2].resource_type.resource_name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, we could create two instances of the same module with different names:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module &quot;server-alpha&quot; {    
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
module &quot;server-beta&quot; {
    source        = &quot;./module_server&quot;
    some_variable = some_value
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this case, the naming or address of resources would be as follows:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module.server-alpha.resource_type.resource_name

module.server-beta.resource_type.resource_name
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;explicit-resources-exposure&quot;&gt;Explicit resources exposure&lt;/h3&gt;

&lt;p&gt;If you want to access some details for the resources in another module, you’ll need to explicitly configure that.&lt;/p&gt;

&lt;p&gt;By default, our module “server” doesn’t know about the network that was created in the “network” module.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-09-terraform-modules-explained/3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So we must declare an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output&lt;/code&gt; value in the “network” module to export its resource, or an attribute of a resource, to other modules.&lt;/p&gt;

&lt;p&gt;The module “server” must declare a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;variable&lt;/code&gt; to be used later as the input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/2020-09-09-terraform-modules-explained/4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This explicit declaration of the output is the way to expose some resource (or information about it) outside — to the scope of the ‘root’ module, hence to make it available for other modules.&lt;/p&gt;

&lt;p&gt;Next, when we call the child module “server”  in the root module, we should assign the output from the “network” module to the variable of the “server” module:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;network_id = module.network.network_id
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is how the final code for calling our child modules will look like in result:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;module &quot;server&quot; {
    count         = 5
    source        = &quot;./module_server&quot;
    some_variable = some_value
    network_id    = module.network.network_id
}

module &quot;network&quot; {  
    source              = &quot;./module_network&quot;
    some_other_variable = some_other_value
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example configuration would create 5 instances of the same server, with all the necessary resources, in the network we created with as a separate module.&lt;/p&gt;

&lt;h3 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h3&gt;
&lt;p&gt;Now you should understand what modules are and what do they do.&lt;/p&gt;

&lt;p&gt;If you’re at the beginning of your Terraform journey, here are some suggestions for the next steps.&lt;/p&gt;

&lt;p&gt;I encourage you to take this short tutorial from HashiCorp, the creators of Terraform, about modules:  &lt;a href=&quot;https://learn.hashicorp.com/collections/terraform/modules&quot;&gt;“Organize Configuration”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, there is a great comprehensive study guide which covers everything from beginner to advanced concepts about Terraform: &lt;a href=&quot;https://learn.hashicorp.com/tutorials/terraform/associate-study?in=terraform/certification&quot;&gt;“Study Guide - Terraform Associate Certification”&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The modular code structure makes your configuration more flexible and yet easy to be understood by others. The latter is especially useful in teamwork.&lt;/p&gt;

&lt;hr /&gt;
&lt;h6 id=&quot;this-article-was-originaly-published-on-freecodecamp-paltform-by-me-but-i-still-want-to-keep-it-here-for-the-record-canonical-link-to-original-publication-was-properly-set-in-the-page-headers&quot;&gt;This article was originaly published on FreeCodeCamp paltform by me, but I still want to keep it here for the record. Canonical link to original publication was properly set in the page headers.&lt;/h6&gt;</content><author><name>Serhii Vasylenko</name></author><category term="[&quot;Learning&quot;]" /><category term="terraform" /><summary type="html">Surprisingly, a lot of beginners skip over Terraform modules for the sake of simplicity, or so they think. Later, they find themselves going through hundreds of lines of configuration code.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://serhii.vasylenko.info/assets/posts/2020-09-09-terraform-modules-explained/terraform-modules.jpeg" /><media:content medium="image" url="https://serhii.vasylenko.info/assets/posts/2020-09-09-terraform-modules-explained/terraform-modules.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>